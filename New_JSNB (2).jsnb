{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "//>html\n<html>\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n  <title>Sign2Text</title>\n  <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">\n  <link rel=\"stylesheet\" href=\"https://code.getmdl.io/1.3.0/material.cyan-teal.min.css\" />\n  <link href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\" rel=\"stylesheet\">\n  <script defer src=\"https://code.getmdl.io/1.3.0/material.min.js\"></script>\n  <link rel=\"stylesheet\" href=\"./styles.css\">\n</head>\n<body>\n  \n  <div id=\"status\">Loading mobilenet...</div>",
      "status": "[77]<br><span style=\"font-size:8px\">7ms<span></span></span>",
      "output": "\n\n\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n  <title>Sign2Text</title>\n  <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">\n  <link rel=\"stylesheet\" href=\"https://code.getmdl.io/1.3.0/material.cyan-teal.min.css\">\n  <link href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\" rel=\"stylesheet\">\n  <script defer=\"\" src=\"https://code.getmdl.io/1.3.0/material.min.js\"></script>\n  <link rel=\"stylesheet\" href=\"./styles.css\">\n\n\n  \n  <div id=\"status\">Loading mobilenet...</div> <br>",
      "type": "code"
    },
    {
      "code": "//>html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Webcam Access Example</title>\n    <style>\n        /* Styling the webcam video element */\n        #webcam {\n            border: 2px solid #000;\n            display: block;\n            margin: 0 auto;\n        }\n        .controller-panels {\n            text-align: center;\n            margin-top: 20px;\n        }\n    </style>\n</head>\n<body>\n\n    <!-- Webcam display area -->\n    <video id=\"webcam\" width=\"224\" height=\"224\" autoplay></video>\n\n    <!-- Controller panel for future functionality -->\n    <div class=\"controller-panels\" id=\"controller\">\n        <button id=\"train\">\n            <img width=\"66\" height=\"66\" src=\"./images/button.svg\" />\n            <span id=\"train-status\">TRAIN MODEL</span>\n        </button>\n        <button id=\"predict\">\n            <img width=\"66\" height=\"66\" src=\"./images/button.svg\" />\n            <span>PREDICT</span>\n        </button>\n    </div>\n\n    <script>\n        // Access the webcam using getUserMedia\n        function startWebcam() {\n            // Check if the browser supports getUserMedia\n            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n                // Request video stream\n                navigator.mediaDevices.getUserMedia({ video: true })\n                    .then(function (stream) {\n                        // Get the video element\n                        var videoElement = document.getElementById('webcam');\n                        // Set the source of the video element to the stream\n                        videoElement.srcObject = stream;\n                    })\n                    .catch(function (error) {\n                        // Handle errors (e.g., permission denied or no webcam)\n                        console.error('Error accessing webcam: ', error);\n                    });\n            } else {\n                alert('Your browser does not support webcam access.');\n            }\n        }\n\n        // Start the webcam when the page loads\n        window.onload = function() {\n            startWebcam();\n        };\n    </script>\n\n</body>\n</html>\n",
      "status": "[2]<br><span style=\"font-size:8px\">2ms<span></span></span>",
      "output": "\n\n\n\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Webcam Access Example</title>\n    <style>\n        /* Styling the webcam video element */\n        #webcam {\n            border: 2px solid #000;\n            display: block;\n            margin: 0 auto;\n        }\n        .controller-panels {\n            text-align: center;\n            margin-top: 20px;\n        }\n    </style>\n\n\n\n    <!-- Webcam display area -->\n    <video id=\"webcam\" width=\"224\" height=\"224\" autoplay=\"\"></video>\n\n    <!-- Controller panel for future functionality -->\n    <div class=\"controller-panels\" id=\"controller\">\n        <button id=\"train\">\n            <img width=\"66\" height=\"66\" src=\"./images/button.svg\">\n            <span id=\"train-status\">TRAIN MODEL</span>\n        </button>\n        <button id=\"predict\">\n            <img width=\"66\" height=\"66\" src=\"./images/button.svg\">\n            <span>PREDICT</span>\n        </button>\n    </div>\n\n    <script>\n        // Access the webcam using getUserMedia\n        function startWebcam() {\n            // Check if the browser supports getUserMedia\n            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n                // Request video stream\n                navigator.mediaDevices.getUserMedia({ video: true })\n                    .then(function (stream) {\n                        // Get the video element\n                        var videoElement = document.getElementById('webcam');\n                        // Set the source of the video element to the stream\n                        videoElement.srcObject = stream;\n                    })\n                    .catch(function (error) {\n                        // Handle errors (e.g., permission denied or no webcam)\n                        console.error('Error accessing webcam: ', error);\n                    });\n            } else {\n                alert('Your browser does not support webcam access.');\n            }\n        }\n\n        // Start the webcam when the page loads\n        window.onload = function() {\n            startWebcam();\n        };\n    </script>\n\n\n\n <br>",
      "type": "code"
    },
    {
      "code": "//>html        \n<div class=\"panel-cell alphah\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=224 height=224 id=\"h-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"h\"/><span>'H' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"h-total\">0</span> <i><b>H</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n        \n        <div class=\"panel-cell alphai\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=224 height=224 id=\"i-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"i\"/><span>'I' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"i-total\">0</span> <i><b>I</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphaj\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=224 height=224 id=\"j-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"j\"/><span>'J' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"j-total\">0</span> <i><b>J</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n      </div><!-- /.panel-row -->\n      <div class=\"panel-row panel-k-l-m-n-o\">\n\n        <div class=\"panel-cell alphak\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=224 height=224 id=\"k-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"k\"/><span>'K' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"k-total\">0</span> <i><b>K</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphal\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=224 height=224 id=\"l-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"l\"/><span>'L' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"l-total\">0</span> <i><b>L</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alpham\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=224 height=224 id=\"m-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"m\"/><span>'M' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"m-total\">0</span> <i><b>M</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphan\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=224 height=224 id=\"n-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"n\"/><span>'N' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"n-total\">0</span> <i><b>N</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphao\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=224 height=224 id=\"o-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"o\"/><span>'O' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"o-total\">0</span> <i><b>O</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n      </div><!-- /.panel-row -->\n      <div class=\"panel-row panel-p-q-r-s-t\">\n\n        <div class=\"panel-cell alphap\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=224 height=224 id=\"p-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"p\"/><span>'P' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"p-total\">0</span> <i><b>P</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphaq\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=224 height=224 id=\"q-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"q\"/><span>'Q' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"q-total\">0</span> <i><b>Q</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n",
      "status": "[79]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "        \n<div class=\"panel-cell alphah\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=\"224\" height=\"224\" id=\"h-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"h\"><span>'H' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"h-total\">0</span> <i><b>H</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n        \n        <div class=\"panel-cell alphai\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=\"224\" height=\"224\" id=\"i-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"i\"><span>'I' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"i-total\">0</span> <i><b>I</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphaj\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=\"224\" height=\"224\" id=\"j-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"j\"><span>'J' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"j-total\">0</span> <i><b>J</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n      <!-- /.panel-row -->\n      <div class=\"panel-row panel-k-l-m-n-o\">\n\n        <div class=\"panel-cell alphak\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=\"224\" height=\"224\" id=\"k-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"k\"><span>'K' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"k-total\">0</span> <i><b>K</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphal\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=\"224\" height=\"224\" id=\"l-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"l\"><span>'L' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"l-total\">0</span> <i><b>L</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alpham\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=\"224\" height=\"224\" id=\"m-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"m\"><span>'M' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"m-total\">0</span> <i><b>M</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphan\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=\"224\" height=\"224\" id=\"n-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"n\"><span>'N' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"n-total\">0</span> <i><b>N</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphao\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=\"224\" height=\"224\" id=\"o-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"o\"><span>'O' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"o-total\">0</span> <i><b>O</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n      </div><!-- /.panel-row -->\n      <div class=\"panel-row panel-p-q-r-s-t\">\n\n        <div class=\"panel-cell alphap\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=\"224\" height=\"224\" id=\"p-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"p\"><span>'P' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"p-total\">0</span> <i><b>P</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphaq\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=\"224\" height=\"224\" id=\"q-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"q\"><span>'Q' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"q-total\">0</span> <i><b>Q</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n </div><br>",
      "type": "code"
    },
    {
      "code": "//>html        \n<div class=\"panel-cell alphar\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=224 height=224 id=\"r-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"r\"/><span>'R' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"r-total\">0</span> <i><b>R</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphas\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=224 height=224 id=\"s-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"s\"/><span>'S' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"s-total\">0</span> <i><b>S</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphat\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=224 height=224 id=\"t-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"t\"/><span>'T' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"t-total\">0</span> <i><b>T</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n      </div><!-- /.panel-row -->\n      <div class=\"panel-row panel-u-v-w-x-y\">\n\n        <div class=\"panel-cell alphau\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=224 height=224 id=\"u-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"u\"/><span>'U' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"u-total\">0</span> <i><b>U</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphav\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=224 height=224 id=\"v-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"v\"/><span>'V' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"v-total\">0</span> <i><b>V</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphaw\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=224 height=224 id=\"w-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"w\"/><span>'W' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"w-total\">0</span> <i><b>W</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphax\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=224 height=224 id=\"x-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"x\"/><span>'X' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"x-total\">0</span> <i><b>X</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphay\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=224 height=224 id=\"y-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"y\"/><span>'Y' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"y-total\">0</span> <i><b>Y</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n      </div><!-- /.panel-row -->\n      <div class=\"panel-row panel-z\">\n\n        <div class=\"panel-cell alphaz\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=224 height=224 id=\"z-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"z\"/><span>'Z' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"z-total\">0</span> <i><b>Z</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell panel-cell-right panel-cell-fill\">\n        </div><!-- ./panel-cell -->\n\n      </div><!-- /.panel-row -->\n\n\n    </div><!-- /.panel -->\n\n  </div><!-- /#controller -->\n\n  \n  <img width=\"640\" height=\"178\" src=\"./images/aslaz.jpg\" /><br><br>\n  \n",
      "status": "[80]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "        \n<div class=\"panel-cell alphar\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=\"224\" height=\"224\" id=\"r-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"r\"><span>'R' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"r-total\">0</span> <i><b>R</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphas\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=\"224\" height=\"224\" id=\"s-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"s\"><span>'S' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"s-total\">0</span> <i><b>S</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphat\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=\"224\" height=\"224\" id=\"t-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"t\"><span>'T' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"t-total\">0</span> <i><b>T</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n      <!-- /.panel-row -->\n      <div class=\"panel-row panel-u-v-w-x-y\">\n\n        <div class=\"panel-cell alphau\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=\"224\" height=\"224\" id=\"u-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"u\"><span>'U' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"u-total\">0</span> <i><b>U</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphav\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=\"224\" height=\"224\" id=\"v-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"v\"><span>'V' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"v-total\">0</span> <i><b>V</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphaw\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=\"224\" height=\"224\" id=\"w-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"w\"><span>'W' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"w-total\">0</span> <i><b>W</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphax\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=\"224\" height=\"224\" id=\"x-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"x\"><span>'X' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"x-total\">0</span> <i><b>X</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell alphay\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=\"224\" height=\"224\" id=\"y-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"y\"><span>'Y' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"y-total\">0</span> <i><b>Y</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n      </div><!-- /.panel-row -->\n      <div class=\"panel-row panel-z\">\n\n        <div class=\"panel-cell alphaz\">\n          <div class=\"thumb-box\">\n            <div class=\"thumb-box-outer\">\n              <div class=\"thumb-box-inner\">\n                <canvas class=\"thumb\" width=\"224\" height=\"224\" id=\"z-thumb\"></canvas>\n              </div>\n              <button class=\"record-button\" id=\"z\"><span>'Z' Sample</span></button>\n            </div>\n            <p>\n              <span id=\"z-total\">0</span> <i><b>Z</b></i> examples\n            </p>\n          </div>\n        </div><!-- ./panel-cell -->\n\n        <div class=\"panel-cell panel-cell-right panel-cell-fill\">\n        </div><!-- ./panel-cell -->\n\n      </div><!-- /.panel-row -->\n\n\n    <!-- /.panel -->\n\n  <!-- /#controller -->\n\n  \n  <img width=\"640\" height=\"178\" src=\"./images/aslaz.jpg\"><br><br>\n  \n <br>",
      "type": "code"
    },
    {
      "code": "//>html  \n\n<script src=\"https://cdn.jsdelivr.net/npm/dat.gui@0.7.2/build/dat.gui.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@0.10.3\"> </script>\n  <script src=\"https://unpkg.com/@tensorflow-models/posenet\"></script>\n\n  <script>\n\n\nvar ui = ui || {}\n\nconst CONTROLS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\nconst CONTROL_CODES = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90];\n\nui.init = function() {\n  document.getElementById('controller').style.display = '';\n  statusElement.style.display = 'none';\n}\n\nconst trainStatusElement = document.getElementById('train-status');\n\nconst learningRateElement = document.getElementById('learningRate');\nui.getLearningRate = () => +learningRateElement.value;\n\nconst batchSizeFractionElement = document.getElementById('batchSizeFraction');\nui.getBatchSizeFraction = () => +batchSizeFractionElement.value;\n\nconst epochsElement = document.getElementById('epochs');\nui.getEpochs = () => +epochsElement.value;\n\nconst denseUnitsElement = document.getElementById('dense-units');\nui.getDenseUnits = () => +denseUnitsElement.value;\nconst statusElement = document.getElementById('status');\n\nui.predictClass = function(classId) {\n  document.body.setAttribute('data-active', CONTROLS[classId]);\n  console.log(CONTROLS[classId]);\n}\n\nui.isPredicting = function() {\n  statusElement.style.visibility = 'visible';\n}\nui.donePredicting = function() {\n  statusElement.style.visibility = 'hidden';\n}\nui.trainStatus = function(status) {\n  trainStatusElement.innerText = status;\n}\n\nvar addExampleHandler;\n\nui.setExampleHandler = function(handler) {\n  addExampleHandler = handler;\n}\nlet mouseDown = false;\nconst totals = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nconst aButton = document.getElementById('a');\nconst bButton = document.getElementById('b');\nconst cButton = document.getElementById('c');\nconst dButton = document.getElementById('d');\nconst eButton = document.getElementById('e');\nconst fButton = document.getElementById('f');\nconst gButton = document.getElementById('g');\nconst hButton = document.getElementById('h');\nconst iButton = document.getElementById('i');\nconst jButton = document.getElementById('j');\nconst kButton = document.getElementById('k');\nconst lButton = document.getElementById('l');\nconst mButton = document.getElementById('m');\nconst nButton = document.getElementById('n');\nconst oButton = document.getElementById('o');\nconst pButton = document.getElementById('p');\nconst qButton = document.getElementById('q');\nconst rButton = document.getElementById('r');\nconst sButton = document.getElementById('s');\nconst tButton = document.getElementById('t');\nconst uButton = document.getElementById('u');\nconst vButton = document.getElementById('v');\nconst wButton = document.getElementById('w');\nconst xButton = document.getElementById('x');\nconst yButton = document.getElementById('y');\nconst zButton = document.getElementById('z');\n\nconst thumbDisplayed = {};\n\nui.handler = async function(label) {\n  mouseDown = true;\n  const className = CONTROLS[label];\n  const button = document.getElementById(className);\n  const total = document.getElementById(className + '-total');\n  while (mouseDown) {\n    addExampleHandler(label);\n    document.body.setAttribute('data-active', CONTROLS[label]);\n    total.innerText = totals[label]++;\n    await tf.nextFrame();\n  }\n  document.body.removeAttribute('data-active');\n}\n\naButton.addEventListener('mousedown', () => ui.handler(0));\naButton.addEventListener('mouseup', () => mouseDown = false);\n\nbButton.addEventListener('mousedown', () => ui.handler(1));\nbButton.addEventListener('mouseup', () => mouseDown = false);\n\ncButton.addEventListener('mousedown', () => ui.handler(2));\ncButton.addEventListener('mouseup', () => mouseDown = false);\n\ndButton.addEventListener('mousedown', () => ui.handler(3));\ndButton.addEventListener('mouseup', () => mouseDown = false);\n\neButton.addEventListener('mousedown', () => ui.handler(4));\neButton.addEventListener('mouseup', () => mouseDown = false);\n\nfButton.addEventListener('mousedown', () => ui.handler(5));\nfButton.addEventListener('mouseup', () => mouseDown = false);\n\ngButton.addEventListener('mousedown', () => ui.handler(6));\ngButton.addEventListener('mouseup', () => mouseDown = false);\n\nhButton.addEventListener('mousedown', () => ui.handler(7));\nhButton.addEventListener('mouseup', () => mouseDown = false);\n\niButton.addEventListener('mousedown', () => ui.handler(8));\niButton.addEventListener('mouseup', () => mouseDown = false);\n\njButton.addEventListener('mousedown', () => ui.handler(9));\njButton.addEventListener('mouseup', () => mouseDown = false);\n\nkButton.addEventListener('mousedown', () => ui.handler(10));\nkButton.addEventListener('mouseup', () => mouseDown = false);\n\nlButton.addEventListener('mousedown', () => ui.handler(11));\nlButton.addEventListener('mouseup', () => mouseDown = false);\n\nmButton.addEventListener('mousedown', () => ui.handler(12));\nmButton.addEventListener('mouseup', () => mouseDown = false);\n\nnButton.addEventListener('mousedown', () => ui.handler(13));\nnButton.addEventListener('mouseup', () => mouseDown = false);\n\noButton.addEventListener('mousedown', () => ui.handler(14));\noButton.addEventListener('mouseup', () => mouseDown = false);\n\npButton.addEventListener('mousedown', () => ui.handler(15));\npButton.addEventListener('mouseup', () => mouseDown = false);\n\nqButton.addEventListener('mousedown', () => ui.handler(16));\nqButton.addEventListener('mouseup', () => mouseDown = false);\n\nrButton.addEventListener('mousedown', () => ui.handler(17));\nrButton.addEventListener('mouseup', () => mouseDown = false);\n\nsButton.addEventListener('mousedown', () => ui.handler(18));\nsButton.addEventListener('mouseup', () => mouseDown = false);\n\ntButton.addEventListener('mousedown', () => ui.handler(19));\ntButton.addEventListener('mouseup', () => mouseDown = false);\n\nuButton.addEventListener('mousedown', () => ui.handler(20));\nuButton.addEventListener('mouseup', () => mouseDown = false);\n\nvButton.addEventListener('mousedown', () => ui.handler(21));\nvButton.addEventListener('mouseup', () => mouseDown = false);\n\nwButton.addEventListener('mousedown', () => ui.handler(22));\nwButton.addEventListener('mouseup', () => mouseDown = false);\n\nxButton.addEventListener('mousedown', () => ui.handler(23));\nxButton.addEventListener('mouseup', () => mouseDown = false);\n\nyButton.addEventListener('mousedown', () => ui.handler(24));\nyButton.addEventListener('mouseup', () => mouseDown = false);\n\nzButton.addEventListener('mousedown', () => ui.handler(25));\nzButton.addEventListener('mouseup', () => mouseDown = false);\n\nui.drawThumb = function(img, label) {\n  if (thumbDisplayed[label] == null) {\n    const thumbCanvas = document.getElementById(CONTROLS[label] + '-thumb');\n    ui.draw(img, thumbCanvas);\n  }\n}\n\nui.draw = function(image, canvas) {\n  const [width, height] = [224, 224];\n  const ctx = canvas.getContext('2d');\n  const imageData = new ImageData(width, height);\n  const data = image.dataSync();\n  for (let i = 0; i < height * width; ++i) {\n    const j = i * 4;\n    imageData.data[j + 0] = (data[i * 3 + 0] + 1) * 127;\n    imageData.data[j + 1] = (data[i * 3 + 1] + 1) * 127;\n    imageData.data[j + 2] = (data[i * 3 + 2] + 1) * 127;\n    imageData.data[j + 3] = 255;\n  }\n  ctx.putImageData(imageData, 0, 0);\n}\n\n\n  </script>\n",
      "status": "[81]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "  \n\n<script src=\"https://cdn.jsdelivr.net/npm/dat.gui@0.7.2/build/dat.gui.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@0.10.3\"> </script>\n  <script src=\"https://unpkg.com/@tensorflow-models/posenet\"></script>\n\n  <script>\n\n\nvar ui = ui || {}\n\nconst CONTROLS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\nconst CONTROL_CODES = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90];\n\nui.init = function() {\n  document.getElementById('controller').style.display = '';\n  statusElement.style.display = 'none';\n}\n\nconst trainStatusElement = document.getElementById('train-status');\n\nconst learningRateElement = document.getElementById('learningRate');\nui.getLearningRate = () => +learningRateElement.value;\n\nconst batchSizeFractionElement = document.getElementById('batchSizeFraction');\nui.getBatchSizeFraction = () => +batchSizeFractionElement.value;\n\nconst epochsElement = document.getElementById('epochs');\nui.getEpochs = () => +epochsElement.value;\n\nconst denseUnitsElement = document.getElementById('dense-units');\nui.getDenseUnits = () => +denseUnitsElement.value;\nconst statusElement = document.getElementById('status');\n\nui.predictClass = function(classId) {\n  document.body.setAttribute('data-active', CONTROLS[classId]);\n  console.log(CONTROLS[classId]);\n}\n\nui.isPredicting = function() {\n  statusElement.style.visibility = 'visible';\n}\nui.donePredicting = function() {\n  statusElement.style.visibility = 'hidden';\n}\nui.trainStatus = function(status) {\n  trainStatusElement.innerText = status;\n}\n\nvar addExampleHandler;\n\nui.setExampleHandler = function(handler) {\n  addExampleHandler = handler;\n}\nlet mouseDown = false;\nconst totals = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nconst aButton = document.getElementById('a');\nconst bButton = document.getElementById('b');\nconst cButton = document.getElementById('c');\nconst dButton = document.getElementById('d');\nconst eButton = document.getElementById('e');\nconst fButton = document.getElementById('f');\nconst gButton = document.getElementById('g');\nconst hButton = document.getElementById('h');\nconst iButton = document.getElementById('i');\nconst jButton = document.getElementById('j');\nconst kButton = document.getElementById('k');\nconst lButton = document.getElementById('l');\nconst mButton = document.getElementById('m');\nconst nButton = document.getElementById('n');\nconst oButton = document.getElementById('o');\nconst pButton = document.getElementById('p');\nconst qButton = document.getElementById('q');\nconst rButton = document.getElementById('r');\nconst sButton = document.getElementById('s');\nconst tButton = document.getElementById('t');\nconst uButton = document.getElementById('u');\nconst vButton = document.getElementById('v');\nconst wButton = document.getElementById('w');\nconst xButton = document.getElementById('x');\nconst yButton = document.getElementById('y');\nconst zButton = document.getElementById('z');\n\nconst thumbDisplayed = {};\n\nui.handler = async function(label) {\n  mouseDown = true;\n  const className = CONTROLS[label];\n  const button = document.getElementById(className);\n  const total = document.getElementById(className + '-total');\n  while (mouseDown) {\n    addExampleHandler(label);\n    document.body.setAttribute('data-active', CONTROLS[label]);\n    total.innerText = totals[label]++;\n    await tf.nextFrame();\n  }\n  document.body.removeAttribute('data-active');\n}\n\naButton.addEventListener('mousedown', () => ui.handler(0));\naButton.addEventListener('mouseup', () => mouseDown = false);\n\nbButton.addEventListener('mousedown', () => ui.handler(1));\nbButton.addEventListener('mouseup', () => mouseDown = false);\n\ncButton.addEventListener('mousedown', () => ui.handler(2));\ncButton.addEventListener('mouseup', () => mouseDown = false);\n\ndButton.addEventListener('mousedown', () => ui.handler(3));\ndButton.addEventListener('mouseup', () => mouseDown = false);\n\neButton.addEventListener('mousedown', () => ui.handler(4));\neButton.addEventListener('mouseup', () => mouseDown = false);\n\nfButton.addEventListener('mousedown', () => ui.handler(5));\nfButton.addEventListener('mouseup', () => mouseDown = false);\n\ngButton.addEventListener('mousedown', () => ui.handler(6));\ngButton.addEventListener('mouseup', () => mouseDown = false);\n\nhButton.addEventListener('mousedown', () => ui.handler(7));\nhButton.addEventListener('mouseup', () => mouseDown = false);\n\niButton.addEventListener('mousedown', () => ui.handler(8));\niButton.addEventListener('mouseup', () => mouseDown = false);\n\njButton.addEventListener('mousedown', () => ui.handler(9));\njButton.addEventListener('mouseup', () => mouseDown = false);\n\nkButton.addEventListener('mousedown', () => ui.handler(10));\nkButton.addEventListener('mouseup', () => mouseDown = false);\n\nlButton.addEventListener('mousedown', () => ui.handler(11));\nlButton.addEventListener('mouseup', () => mouseDown = false);\n\nmButton.addEventListener('mousedown', () => ui.handler(12));\nmButton.addEventListener('mouseup', () => mouseDown = false);\n\nnButton.addEventListener('mousedown', () => ui.handler(13));\nnButton.addEventListener('mouseup', () => mouseDown = false);\n\noButton.addEventListener('mousedown', () => ui.handler(14));\noButton.addEventListener('mouseup', () => mouseDown = false);\n\npButton.addEventListener('mousedown', () => ui.handler(15));\npButton.addEventListener('mouseup', () => mouseDown = false);\n\nqButton.addEventListener('mousedown', () => ui.handler(16));\nqButton.addEventListener('mouseup', () => mouseDown = false);\n\nrButton.addEventListener('mousedown', () => ui.handler(17));\nrButton.addEventListener('mouseup', () => mouseDown = false);\n\nsButton.addEventListener('mousedown', () => ui.handler(18));\nsButton.addEventListener('mouseup', () => mouseDown = false);\n\ntButton.addEventListener('mousedown', () => ui.handler(19));\ntButton.addEventListener('mouseup', () => mouseDown = false);\n\nuButton.addEventListener('mousedown', () => ui.handler(20));\nuButton.addEventListener('mouseup', () => mouseDown = false);\n\nvButton.addEventListener('mousedown', () => ui.handler(21));\nvButton.addEventListener('mouseup', () => mouseDown = false);\n\nwButton.addEventListener('mousedown', () => ui.handler(22));\nwButton.addEventListener('mouseup', () => mouseDown = false);\n\nxButton.addEventListener('mousedown', () => ui.handler(23));\nxButton.addEventListener('mouseup', () => mouseDown = false);\n\nyButton.addEventListener('mousedown', () => ui.handler(24));\nyButton.addEventListener('mouseup', () => mouseDown = false);\n\nzButton.addEventListener('mousedown', () => ui.handler(25));\nzButton.addEventListener('mouseup', () => mouseDown = false);\n\nui.drawThumb = function(img, label) {\n  if (thumbDisplayed[label] == null) {\n    const thumbCanvas = document.getElementById(CONTROLS[label] + '-thumb');\n    ui.draw(img, thumbCanvas);\n  }\n}\n\nui.draw = function(image, canvas) {\n  const [width, height] = [224, 224];\n  const ctx = canvas.getContext('2d');\n  const imageData = new ImageData(width, height);\n  const data = image.dataSync();\n  for (let i = 0; i < height * width; ++i) {\n    const j = i * 4;\n    imageData.data[j + 0] = (data[i * 3 + 0] + 1) * 127;\n    imageData.data[j + 1] = (data[i * 3 + 1] + 1) * 127;\n    imageData.data[j + 2] = (data[i * 3 + 2] + 1) * 127;\n    imageData.data[j + 3] = 255;\n  }\n  ctx.putImageData(imageData, 0, 0);\n}\n\n\n  </script>\n <br>",
      "type": "code"
    },
    {
      "code": "//>html  \n<script>\n\n    \nclass Webcam {\n  \n  constructor(webcamElement) {\n    this.webcamElement = webcamElement;\n  }\n\n  \n  capture() {\n    return tf.tidy(() => {\n      const webcamImage = tf.fromPixels(this.webcamElement);\n\n      const croppedImage = this.cropImage(webcamImage);\n\n      const batchedImage = croppedImage.expandDims(0);\n\n      return batchedImage.toFloat().div(tf.scalar(127)).sub(tf.scalar(1));\n    });\n  }\n\n \n  cropImage(img) {\n    const size = Math.min(img.shape[0], img.shape[1]);\n    const centerHeight = img.shape[0] / 2;\n    const beginHeight = centerHeight - (size / 2);\n    const centerWidth = img.shape[1] / 2;\n    const beginWidth = centerWidth - (size / 2);\n    return img.slice([beginHeight, beginWidth, 0], [size, size, 3]);\n  }\n\n \n  adjustVideoSize(width, height) {\n    const aspectRatio = width / height;\n    if (width >= height) {\n      this.webcamElement.width = aspectRatio * this.webcamElement.height;\n    } else if (width < height) {\n      this.webcamElement.height = this.webcamElement.width / aspectRatio;\n    }\n  }\n\n  async setup() {\n    return new Promise((resolve, reject) => {\n      const navigatorAny = navigator;\n      navigator.getUserMedia = navigator.getUserMedia ||\n          navigatorAny.webkitGetUserMedia || navigatorAny.mozGetUserMedia ||\n          navigatorAny.msGetUserMedia;\n      if (navigator.getUserMedia) {\n        navigator.getUserMedia(\n            {video: true},\n            stream => {\n              this.webcamElement.srcObject = stream;\n              this.webcamElement.addEventListener('loadeddata', async () => {\n                this.adjustVideoSize(\n                    this.webcamElement.videoWidth,\n                    this.webcamElement.videoHeight);\n                resolve();\n              }, false);\n            },\n            error => {\n              document.querySelector('#no-webcam').style.display = 'block';\n            });\n      } else {\n        reject();\n      }\n    });\n  }\n}\n\n  </script>\n\n  <script>\n   \nclass ControllerDataset {\n  constructor(numClasses) {\n    this.numClasses = numClasses;\n  }\n\n  \n  addExample(example, label) {\n    const y = tf.tidy(\n        () => tf.oneHot(tf.tensor1d([label]).toInt(), this.numClasses));\n\n    if (this.xs == null) {\n      \n      this.xs = tf.keep(example);\n      this.ys = tf.keep(y);\n    } else {\n      const oldX = this.xs;\n      this.xs = tf.keep(oldX.concat(example, 0));\n\n      const oldY = this.ys;\n      this.ys = tf.keep(oldY.concat(y, 0));\n\n      oldX.dispose();\n      oldY.dispose();\n      y.dispose();\n    }\n  }\n}\n\n\n  </script>",
      "status": "[82]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "  \n<script>\n\n    \nclass Webcam {\n  \n  constructor(webcamElement) {\n    this.webcamElement = webcamElement;\n  }\n\n  \n  capture() {\n    return tf.tidy(() => {\n      const webcamImage = tf.fromPixels(this.webcamElement);\n\n      const croppedImage = this.cropImage(webcamImage);\n\n      const batchedImage = croppedImage.expandDims(0);\n\n      return batchedImage.toFloat().div(tf.scalar(127)).sub(tf.scalar(1));\n    });\n  }\n\n \n  cropImage(img) {\n    const size = Math.min(img.shape[0], img.shape[1]);\n    const centerHeight = img.shape[0] / 2;\n    const beginHeight = centerHeight - (size / 2);\n    const centerWidth = img.shape[1] / 2;\n    const beginWidth = centerWidth - (size / 2);\n    return img.slice([beginHeight, beginWidth, 0], [size, size, 3]);\n  }\n\n \n  adjustVideoSize(width, height) {\n    const aspectRatio = width / height;\n    if (width >= height) {\n      this.webcamElement.width = aspectRatio * this.webcamElement.height;\n    } else if (width < height) {\n      this.webcamElement.height = this.webcamElement.width / aspectRatio;\n    }\n  }\n\n  async setup() {\n    return new Promise((resolve, reject) => {\n      const navigatorAny = navigator;\n      navigator.getUserMedia = navigator.getUserMedia ||\n          navigatorAny.webkitGetUserMedia || navigatorAny.mozGetUserMedia ||\n          navigatorAny.msGetUserMedia;\n      if (navigator.getUserMedia) {\n        navigator.getUserMedia(\n            {video: true},\n            stream => {\n              this.webcamElement.srcObject = stream;\n              this.webcamElement.addEventListener('loadeddata', async () => {\n                this.adjustVideoSize(\n                    this.webcamElement.videoWidth,\n                    this.webcamElement.videoHeight);\n                resolve();\n              }, false);\n            },\n            error => {\n              document.querySelector('#no-webcam').style.display = 'block';\n            });\n      } else {\n        reject();\n      }\n    });\n  }\n}\n\n  </script>\n\n  <script>\n   \nclass ControllerDataset {\n  constructor(numClasses) {\n    this.numClasses = numClasses;\n  }\n\n  \n  addExample(example, label) {\n    const y = tf.tidy(\n        () => tf.oneHot(tf.tensor1d([label]).toInt(), this.numClasses));\n\n    if (this.xs == null) {\n      \n      this.xs = tf.keep(example);\n      this.ys = tf.keep(y);\n    } else {\n      const oldX = this.xs;\n      this.xs = tf.keep(oldX.concat(example, 0));\n\n      const oldY = this.ys;\n      this.ys = tf.keep(oldY.concat(y, 0));\n\n      oldX.dispose();\n      oldY.dispose();\n      y.dispose();\n    }\n  }\n}\n\n\n  </script> <br>",
      "type": "code"
    },
    {
      "code": "//>html  \n<script >\n\nconst NUM_CLASSES = 26;\n\nconst webcam = new Webcam(document.getElementById('webcam'));\n\nconst controllerDataset = new ControllerDataset(NUM_CLASSES);\n\nlet mobilenet;\nlet model;\n\n\nasync function loadMobilenet() {\n  const mobilenet = await tf.loadModel(\n      'https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_0.25_224/model.json');\n\n  const layer = mobilenet.getLayer('conv_pw_13_relu');\n  return tf.model({inputs: mobilenet.inputs, outputs: layer.output});\n}\n\n\nui.setExampleHandler(label => {\n  tf.tidy(() => {\n    const img = webcam.capture();\n    controllerDataset.addExample(mobilenet.predict(img), label);\n\n    ui.drawThumb(img, label);\n  });\n});\n\n\nasync function train() {\n  if (controllerDataset.xs == null) {\n    throw new Error('Add some examples before training!');\n  }\n\n \n  model = tf.sequential({\n    layers: [\n      /\n      tf.layers.flatten({inputShape: [7, 7, 256]}),\n      tf.layers.dense({\n        units: ui.getDenseUnits(),\n        activation: 'relu',\n        kernelInitializer: 'varianceScaling',\n        useBias: true\n      }),\n      \n      tf.layers.dense({\n        units: NUM_CLASSES,\n        kernelInitializer: 'varianceScaling',\n        useBias: false,\n        activation: 'softmax'\n      })\n    ]\n  });\n\n  const optimizer = tf.train.adam(ui.getLearningRate());\n  \n  model.compile({optimizer: optimizer, loss: 'categoricalCrossentropy'});\n\n \n  const batchSize =\n      Math.floor(controllerDataset.xs.shape[0] * ui.getBatchSizeFraction());\n  if (!(batchSize > 0)) {\n    throw new Error(\n        `Batch size is 0 or NaN. Please choose a non-zero fraction.`);\n  }\n\n  model.fit(controllerDataset.xs, controllerDataset.ys, {\n    batchSize,\n    epochs: ui.getEpochs(),\n    callbacks: {\n      onBatchEnd: async (batch, logs) => {\n        ui.trainStatus('Loss: ' + logs.loss.toFixed(5));\n        await tf.nextFrame();\n      }\n    }\n  });\n}\n\nlet isPredicting = false;\n\nasync function predict() {\n  ui.isPredicting();\n  while (isPredicting) {\n    const predictedClass = tf.tidy(() => {\n      const img = webcam.capture();\n\n      \n      const activation = mobilenet.predict(img);\n\n      \n      const predictions = model.predict(activation);\n\n     \n      return predictions.as1D().argMax();\n    });\n\n    const classId = (await predictedClass.data())[0];\n    predictedClass.dispose();\n\n    ui.predictClass(classId);\n    await tf.nextFrame();\n  }\n  ui.donePredicting();\n}\n\ndocument.getElementById('train').addEventListener('click', async () => {\n  ui.trainStatus('Training...');\n  await tf.nextFrame();\n  await tf.nextFrame();\n  isPredicting = false;\n  train();\n});\ndocument.getElementById('predict').addEventListener('click', () => {\n  isPredicting = true;\n  predict();\n});\n\nasync function init() {\n  await webcam.setup();\n  mobilenet = await loadMobilenet();\n\n  \n  tf.tidy(() => mobilenet.predict(webcam.capture()));\n\n  ui.init();\n}\n\n(function () {\n    if (!console) {\n        console = {};\n    }\n    var old = console.log;\n    var logger = document.getElementById('log');\n    console.log = function (message) {\n        if (typeof message == 'object') {\n            logger.innerHTML += (JSON && JSON.stringify ? JSON.stringify(message) : String(message)) + '<br />';\n        } else {\n            logger.innerHTML = message;\n        }\n    }\n})();\n\ninit();\n\n\n  </script>\n  \n",
      "status": "[83]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "  \n<script>\n\nconst NUM_CLASSES = 26;\n\nconst webcam = new Webcam(document.getElementById('webcam'));\n\nconst controllerDataset = new ControllerDataset(NUM_CLASSES);\n\nlet mobilenet;\nlet model;\n\n\nasync function loadMobilenet() {\n  const mobilenet = await tf.loadModel(\n      'https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_0.25_224/model.json');\n\n  const layer = mobilenet.getLayer('conv_pw_13_relu');\n  return tf.model({inputs: mobilenet.inputs, outputs: layer.output});\n}\n\n\nui.setExampleHandler(label => {\n  tf.tidy(() => {\n    const img = webcam.capture();\n    controllerDataset.addExample(mobilenet.predict(img), label);\n\n    ui.drawThumb(img, label);\n  });\n});\n\n\nasync function train() {\n  if (controllerDataset.xs == null) {\n    throw new Error('Add some examples before training!');\n  }\n\n \n  model = tf.sequential({\n    layers: [\n      /\n      tf.layers.flatten({inputShape: [7, 7, 256]}),\n      tf.layers.dense({\n        units: ui.getDenseUnits(),\n        activation: 'relu',\n        kernelInitializer: 'varianceScaling',\n        useBias: true\n      }),\n      \n      tf.layers.dense({\n        units: NUM_CLASSES,\n        kernelInitializer: 'varianceScaling',\n        useBias: false,\n        activation: 'softmax'\n      })\n    ]\n  });\n\n  const optimizer = tf.train.adam(ui.getLearningRate());\n  \n  model.compile({optimizer: optimizer, loss: 'categoricalCrossentropy'});\n\n \n  const batchSize =\n      Math.floor(controllerDataset.xs.shape[0] * ui.getBatchSizeFraction());\n  if (!(batchSize > 0)) {\n    throw new Error(\n        `Batch size is 0 or NaN. Please choose a non-zero fraction.`);\n  }\n\n  model.fit(controllerDataset.xs, controllerDataset.ys, {\n    batchSize,\n    epochs: ui.getEpochs(),\n    callbacks: {\n      onBatchEnd: async (batch, logs) => {\n        ui.trainStatus('Loss: ' + logs.loss.toFixed(5));\n        await tf.nextFrame();\n      }\n    }\n  });\n}\n\nlet isPredicting = false;\n\nasync function predict() {\n  ui.isPredicting();\n  while (isPredicting) {\n    const predictedClass = tf.tidy(() => {\n      const img = webcam.capture();\n\n      \n      const activation = mobilenet.predict(img);\n\n      \n      const predictions = model.predict(activation);\n\n     \n      return predictions.as1D().argMax();\n    });\n\n    const classId = (await predictedClass.data())[0];\n    predictedClass.dispose();\n\n    ui.predictClass(classId);\n    await tf.nextFrame();\n  }\n  ui.donePredicting();\n}\n\ndocument.getElementById('train').addEventListener('click', async () => {\n  ui.trainStatus('Training...');\n  await tf.nextFrame();\n  await tf.nextFrame();\n  isPredicting = false;\n  train();\n});\ndocument.getElementById('predict').addEventListener('click', () => {\n  isPredicting = true;\n  predict();\n});\n\nasync function init() {\n  await webcam.setup();\n  mobilenet = await loadMobilenet();\n\n  \n  tf.tidy(() => mobilenet.predict(webcam.capture()));\n\n  ui.init();\n}\n\n(function () {\n    if (!console) {\n        console = {};\n    }\n    var old = console.log;\n    var logger = document.getElementById('log');\n    console.log = function (message) {\n        if (typeof message == 'object') {\n            logger.innerHTML += (JSON && JSON.stringify ? JSON.stringify(message) : String(message)) + '<br />';\n        } else {\n            logger.innerHTML = message;\n        }\n    }\n})();\n\ninit();\n\n\n  </script>\n  \n <br>",
      "type": "code"
    },
    {
      "code": "//>html\n  <script>\n\n\nconst color = 'aqua';\nconst lineWidth = 2;\n\nfunction toTuple({ y, x }) {\n  return [y, x];\n}\n\n\nfunction drawSegment([ay, ax], [by, bx], color, scale, ctx) {\n  ctx.beginPath();\n  ctx.moveTo(ax * scale, ay * scale);\n  ctx.lineTo(bx * scale, by * scale);\n  ctx.lineWidth = lineWidth;\n  ctx.strokeStyle = color;\n  ctx.stroke();\n}\n\n\nfunction drawSkeleton(keypoints, minConfidence, ctx, scale = 1) {\n  const adjacentKeyPoints = posenet.getAdjacentKeyPoints(\n    keypoints, minConfidence);\n\n  adjacentKeyPoints.forEach((keypoints) => {\n    drawSegment(toTuple(keypoints[0].position),\n      toTuple(keypoints[1].position), color, scale, ctx);\n  });\n}\n\nfunction drawKeypoints(keypoints, minConfidence, ctx, scale = 1) {\n  for (let i = 0; i < keypoints.length; i++) {\n    const keypoint = keypoints[i];\n\n    if (keypoint.score < minConfidence) {\n      continue;\n    }\n\n    const { y, x } = keypoint.position;\n    ctx.beginPath();\n    ctx.arc(x * scale, y * scale, 3, 0, 2 * Math.PI);\n    ctx.fillStyle = color;\n    ctx.fill();\n  }\n}\n\n\nfunction drawBoundingBox(keypoints, ctx) {\n  const boundingBox = posenet.getBoundingBox(keypoints);\n\n  ctx.rect(boundingBox.minX, boundingBox.minY,\n    boundingBox.maxX - boundingBox.minX, boundingBox.maxY - boundingBox.minY);\n\n  ctx.stroke();\n}\n\n\nasync function renderToCanvas(a, ctx) {\n  const [height, width] = a.shape;\n  const imageData = new ImageData(width, height);\n\n  const data = await a.data();\n\n  for (let i = 0; i < height * width; ++i) {\n    const j = i * 4;\n    const k = i * 3;\n\n    imageData.data[j + 0] = data[k + 0];\n    imageData.data[j + 1] = data[k + 1];\n    imageData.data[j + 2] = data[k + 2];\n    imageData.data[j + 3] = 255;\n  }\n\n  ctx.putImageData(imageData, 0, 0);\n}\n\n\nfunction renderImageToCanvas(image, size, canvas) {\n  canvas.width = size[0];\n  canvas.height = size[1];\n  const ctx = canvas.getContext('2d');\n\n  ctx.drawImage(image, 0, 0);\n}\n\n\nfunction drawHeatMapValues(heatMapValues, outputStride, canvas) {\n  const ctx = canvas.getContext('2d');\n  const radius = 5;\n  const scaledValues = heatMapValues.mul(tf.scalar(outputStride, 'int32'));\n\n  drawPoints(ctx, scaledValues, radius, color);\n}\n\n\nfunction drawPoints(ctx, points, radius, color) {\n  const data = points.buffer().values;\n\n  for (let i = 0; i < data.length; i += 2) {\n    const pointY = data[i];\n    const pointX = data[i + 1];\n\n    if (pointX !== 0 && pointY !== 0) {\n      ctx.beginPath();\n      ctx.arc(pointX, pointY, radius, 0, 2 * Math.PI);\n      ctx.fillStyle = color;\n      ctx.fill();\n    }\n  }\n}\n\n\nfunction drawOffsetVectors(\n  heatMapValues, offsets, outputStride, scale = 1, ctx) {\n  const offsetPoints = posenet.singlePose.getOffsetPoints(\n    heatMapValues, outputStride, offsets);\n\n  const heatmapData = heatMapValues.buffer().values;\n  const offsetPointsData = offsetPoints.buffer().values;\n\n  for (let i = 0; i < heatmapData.length; i += 2) {\n    const heatmapY = heatmapData[i] * outputStride;\n    const heatmapX = heatmapData[i + 1] * outputStride;\n    const offsetPointY = offsetPointsData[i];\n    const offsetPointX = offsetPointsData[i + 1];\n\n    drawSegment([heatmapY, heatmapX], [offsetPointY, offsetPointX],\n      color, scale, ctx);\n  }\n}\n\n\n  </script>\n  <script>\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n\n\n  </script>\n\n",
      "status": "[84]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "\n  <script>\n\n\nconst color = 'aqua';\nconst lineWidth = 2;\n\nfunction toTuple({ y, x }) {\n  return [y, x];\n}\n\n\nfunction drawSegment([ay, ax], [by, bx], color, scale, ctx) {\n  ctx.beginPath();\n  ctx.moveTo(ax * scale, ay * scale);\n  ctx.lineTo(bx * scale, by * scale);\n  ctx.lineWidth = lineWidth;\n  ctx.strokeStyle = color;\n  ctx.stroke();\n}\n\n\nfunction drawSkeleton(keypoints, minConfidence, ctx, scale = 1) {\n  const adjacentKeyPoints = posenet.getAdjacentKeyPoints(\n    keypoints, minConfidence);\n\n  adjacentKeyPoints.forEach((keypoints) => {\n    drawSegment(toTuple(keypoints[0].position),\n      toTuple(keypoints[1].position), color, scale, ctx);\n  });\n}\n\nfunction drawKeypoints(keypoints, minConfidence, ctx, scale = 1) {\n  for (let i = 0; i < keypoints.length; i++) {\n    const keypoint = keypoints[i];\n\n    if (keypoint.score < minConfidence) {\n      continue;\n    }\n\n    const { y, x } = keypoint.position;\n    ctx.beginPath();\n    ctx.arc(x * scale, y * scale, 3, 0, 2 * Math.PI);\n    ctx.fillStyle = color;\n    ctx.fill();\n  }\n}\n\n\nfunction drawBoundingBox(keypoints, ctx) {\n  const boundingBox = posenet.getBoundingBox(keypoints);\n\n  ctx.rect(boundingBox.minX, boundingBox.minY,\n    boundingBox.maxX - boundingBox.minX, boundingBox.maxY - boundingBox.minY);\n\n  ctx.stroke();\n}\n\n\nasync function renderToCanvas(a, ctx) {\n  const [height, width] = a.shape;\n  const imageData = new ImageData(width, height);\n\n  const data = await a.data();\n\n  for (let i = 0; i < height * width; ++i) {\n    const j = i * 4;\n    const k = i * 3;\n\n    imageData.data[j + 0] = data[k + 0];\n    imageData.data[j + 1] = data[k + 1];\n    imageData.data[j + 2] = data[k + 2];\n    imageData.data[j + 3] = 255;\n  }\n\n  ctx.putImageData(imageData, 0, 0);\n}\n\n\nfunction renderImageToCanvas(image, size, canvas) {\n  canvas.width = size[0];\n  canvas.height = size[1];\n  const ctx = canvas.getContext('2d');\n\n  ctx.drawImage(image, 0, 0);\n}\n\n\nfunction drawHeatMapValues(heatMapValues, outputStride, canvas) {\n  const ctx = canvas.getContext('2d');\n  const radius = 5;\n  const scaledValues = heatMapValues.mul(tf.scalar(outputStride, 'int32'));\n\n  drawPoints(ctx, scaledValues, radius, color);\n}\n\n\nfunction drawPoints(ctx, points, radius, color) {\n  const data = points.buffer().values;\n\n  for (let i = 0; i < data.length; i += 2) {\n    const pointY = data[i];\n    const pointX = data[i + 1];\n\n    if (pointX !== 0 && pointY !== 0) {\n      ctx.beginPath();\n      ctx.arc(pointX, pointY, radius, 0, 2 * Math.PI);\n      ctx.fillStyle = color;\n      ctx.fill();\n    }\n  }\n}\n\n\nfunction drawOffsetVectors(\n  heatMapValues, offsets, outputStride, scale = 1, ctx) {\n  const offsetPoints = posenet.singlePose.getOffsetPoints(\n    heatMapValues, outputStride, offsets);\n\n  const heatmapData = heatMapValues.buffer().values;\n  const offsetPointsData = offsetPoints.buffer().values;\n\n  for (let i = 0; i < heatmapData.length; i += 2) {\n    const heatmapY = heatmapData[i] * outputStride;\n    const heatmapX = heatmapData[i + 1] * outputStride;\n    const offsetPointY = offsetPointsData[i];\n    const offsetPointX = offsetPointsData[i + 1];\n\n    drawSegment([heatmapY, heatmapX], [offsetPointY, offsetPointX],\n      color, scale, ctx);\n  }\n}\n\n\n  </script>\n  <script>\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n\n\n  </script>\n\n <br>",
      "type": "code"
    },
    {
      "code": "//>html  \n\n<script>\n\n  \nconst videoWidth = 335;\nconst videoHeight = 280;\nconst stats = new Stats();\n\nfunction isAndroid() {\n  return /Android/i.test(navigator.userAgent);\n}\n\nfunction isiOS() {\n  return /iPhone|iPad|iPod/i.test(navigator.userAgent);\n}\n\nfunction isMobile() {\n  return isAndroid() || isiOS();\n}\n\n\nasync function setupCamera() {\n  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n    throw 'Browser API navigator.mediaDevices.getUserMedia not available';\n  }\n\n  const video = document.getElementById('video');\n  video.width = videoWidth;\n  video.height = videoHeight;\n\n  const mobile = isMobile();\n  const stream = await navigator.mediaDevices.getUserMedia({\n    'audio': false,\n    'video': {\n      facingMode: 'user',\n      width: mobile ? undefined : videoWidth,\n      height: mobile ? undefined: videoHeight}\n  });\n  video.srcObject = stream;\n\n  return new Promise(resolve => {\n    video.onloadedmetadata = () => {\n      resolve(video);\n    };\n  });\n}\n\nasync function loadVideo() {\n  const video = await setupCamera();\n  video.play();\n\n  return video;\n}\n\nconst guiState = {\n  algorithm: 'single-pose',\n  input: {\n    mobileNetArchitecture: isMobile() ? '0.50' : '1.01',\n    outputStride: 16,\n    imageScaleFactor: 0.5,\n  },\n  singlePoseDetection: {\n    minPoseConfidence: 0.1,\n    minPartConfidence: 0.5,\n  },\n  multiPoseDetection: {\n    maxPoseDetections: 2,\n    minPoseConfidence: 0.1,\n    minPartConfidence: 0.3,\n    nmsRadius: 20.0,\n  },\n  output: {\n    showVideo: true,\n    showSkeleton: true,\n    showPoints: true,\n  },\n  net: null,\n};\n\n\nfunction setupGui(cameras, net) {\n  guiState.net = net;\n\n  if (cameras.length > 0) {\n    guiState.camera = cameras[0].deviceId;\n  }\n\n  const cameraOptions = cameras.reduce((result, { label, deviceId }) => {\n    result[label] = deviceId;\n    return result;\n  }, {});\n\n  const gui = new dat.GUI({ width: 300 });\n\n\n  const algorithmController = gui.add(\n    guiState, 'algorithm', ['single-pose', 'multi-pose']);\n\n  \n  let input = gui.addFolder('Input');\n  \n  const architectureController =\n    input.add(guiState.input, 'mobileNetArchitecture', ['1.01', '1.00', '0.75', '0.50']);\n \n  input.add(guiState.input, 'outputStride', [8, 16, 32]);\n  input.add(guiState.input, 'imageScaleFactor').min(0.2).max(1.0);\n  input.open();\n\n  \n  let single = gui.addFolder('Single Pose Detection');\n  single.add(guiState.singlePoseDetection, 'minPoseConfidence', 0.0, 1.0);\n  single.add(guiState.singlePoseDetection, 'minPartConfidence', 0.0, 1.0);\n  single.open();\n\n  let multi = gui.addFolder('Multi Pose Detection');\n  multi.add(\n    guiState.multiPoseDetection, 'maxPoseDetections').min(1).max(20).step(1);\n  multi.add(guiState.multiPoseDetection, 'minPoseConfidence', 0.0, 1.0);\n  multi.add(guiState.multiPoseDetection, 'minPartConfidence', 0.0, 1.0);\n  \n  multi.add(guiState.multiPoseDetection, 'nmsRadius').min(0.0).max(40.0);\n\n  let output = gui.addFolder('Output');\n  output.add(guiState.output, 'showVideo');\n  output.add(guiState.output, 'showSkeleton');\n  output.add(guiState.output, 'showPoints');\n  output.open();\n\n\n  architectureController.onChange(function (architecture) {\n    guiState.changeToArchitecture = architecture;\n  });\n\n  algorithmController.onChange(function (value) {\n    switch (guiState.algorithm) {\n      case 'single-pose':\n        multi.close();\n        single.open();\n        break;\n      case 'multi-pose':\n        single.close();\n        multi.open();\n        break;\n    }\n  });\n}\n\n\n<script/>\n",
      "status": "[85]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "  \n\n<script>\n\n  \nconst videoWidth = 335;\nconst videoHeight = 280;\nconst stats = new Stats();\n\nfunction isAndroid() {\n  return /Android/i.test(navigator.userAgent);\n}\n\nfunction isiOS() {\n  return /iPhone|iPad|iPod/i.test(navigator.userAgent);\n}\n\nfunction isMobile() {\n  return isAndroid() || isiOS();\n}\n\n\nasync function setupCamera() {\n  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n    throw 'Browser API navigator.mediaDevices.getUserMedia not available';\n  }\n\n  const video = document.getElementById('video');\n  video.width = videoWidth;\n  video.height = videoHeight;\n\n  const mobile = isMobile();\n  const stream = await navigator.mediaDevices.getUserMedia({\n    'audio': false,\n    'video': {\n      facingMode: 'user',\n      width: mobile ? undefined : videoWidth,\n      height: mobile ? undefined: videoHeight}\n  });\n  video.srcObject = stream;\n\n  return new Promise(resolve => {\n    video.onloadedmetadata = () => {\n      resolve(video);\n    };\n  });\n}\n\nasync function loadVideo() {\n  const video = await setupCamera();\n  video.play();\n\n  return video;\n}\n\nconst guiState = {\n  algorithm: 'single-pose',\n  input: {\n    mobileNetArchitecture: isMobile() ? '0.50' : '1.01',\n    outputStride: 16,\n    imageScaleFactor: 0.5,\n  },\n  singlePoseDetection: {\n    minPoseConfidence: 0.1,\n    minPartConfidence: 0.5,\n  },\n  multiPoseDetection: {\n    maxPoseDetections: 2,\n    minPoseConfidence: 0.1,\n    minPartConfidence: 0.3,\n    nmsRadius: 20.0,\n  },\n  output: {\n    showVideo: true,\n    showSkeleton: true,\n    showPoints: true,\n  },\n  net: null,\n};\n\n\nfunction setupGui(cameras, net) {\n  guiState.net = net;\n\n  if (cameras.length > 0) {\n    guiState.camera = cameras[0].deviceId;\n  }\n\n  const cameraOptions = cameras.reduce((result, { label, deviceId }) => {\n    result[label] = deviceId;\n    return result;\n  }, {});\n\n  const gui = new dat.GUI({ width: 300 });\n\n\n  const algorithmController = gui.add(\n    guiState, 'algorithm', ['single-pose', 'multi-pose']);\n\n  \n  let input = gui.addFolder('Input');\n  \n  const architectureController =\n    input.add(guiState.input, 'mobileNetArchitecture', ['1.01', '1.00', '0.75', '0.50']);\n \n  input.add(guiState.input, 'outputStride', [8, 16, 32]);\n  input.add(guiState.input, 'imageScaleFactor').min(0.2).max(1.0);\n  input.open();\n\n  \n  let single = gui.addFolder('Single Pose Detection');\n  single.add(guiState.singlePoseDetection, 'minPoseConfidence', 0.0, 1.0);\n  single.add(guiState.singlePoseDetection, 'minPartConfidence', 0.0, 1.0);\n  single.open();\n\n  let multi = gui.addFolder('Multi Pose Detection');\n  multi.add(\n    guiState.multiPoseDetection, 'maxPoseDetections').min(1).max(20).step(1);\n  multi.add(guiState.multiPoseDetection, 'minPoseConfidence', 0.0, 1.0);\n  multi.add(guiState.multiPoseDetection, 'minPartConfidence', 0.0, 1.0);\n  \n  multi.add(guiState.multiPoseDetection, 'nmsRadius').min(0.0).max(40.0);\n\n  let output = gui.addFolder('Output');\n  output.add(guiState.output, 'showVideo');\n  output.add(guiState.output, 'showSkeleton');\n  output.add(guiState.output, 'showPoints');\n  output.open();\n\n\n  architectureController.onChange(function (architecture) {\n    guiState.changeToArchitecture = architecture;\n  });\n\n  algorithmController.onChange(function (value) {\n    switch (guiState.algorithm) {\n      case 'single-pose':\n        multi.close();\n        single.open();\n        break;\n      case 'multi-pose':\n        single.close();\n        multi.open();\n        break;\n    }\n  });\n}\n\n\n<script/>\n </script><br>",
      "type": "code"
    },
    {
      "code": "//>html\n<script>\n  function setupFPS() {\n  stats.showPanel(0);\n  document.body.appendChild(stats.dom);\n}\n\n\nfunction detectPoseInRealTime(video, net) {\n  const canvas = document.getElementById('output');\n  const ctx = canvas.getContext('2d');\n  const flipHorizontal = true; \n\n  canvas.width = videoWidth;\n  canvas.height = videoHeight;\n\n  async function poseDetectionFrame() {\n    if (guiState.changeToArchitecture) {\n      \n      guiState.net.dispose();\n\n      guiState.net = await posenet.load(Number(guiState.changeToArchitecture));\n\n      guiState.changeToArchitecture = null;\n    }\n\n    stats.begin();\n\n    \n    const imageScaleFactor = guiState.input.imageScaleFactor;\n    const outputStride = Number(guiState.input.outputStride);\n\n    let poses = [];\n    let minPoseConfidence;\n    let minPartConfidence;\n    switch (guiState.algorithm) {\n      case 'single-pose':\n        const pose = await guiState.net.estimateSinglePose(video, imageScaleFactor, flipHorizontal, outputStride);\n        poses.push(pose);\n\n        minPoseConfidence = Number(\n          guiState.singlePoseDetection.minPoseConfidence);\n        minPartConfidence = Number(\n          guiState.singlePoseDetection.minPartConfidence);\n        break;\n      case 'multi-pose':\n        poses = await guiState.net.estimateMultiplePoses(video, imageScaleFactor, flipHorizontal, outputStride,\n          guiState.multiPoseDetection.maxPoseDetections,\n          guiState.multiPoseDetection.minPartConfidence,\n          guiState.multiPoseDetection.nmsRadius);\n\n        minPoseConfidence = Number(guiState.multiPoseDetection.minPoseConfidence);\n        minPartConfidence = Number(guiState.multiPoseDetection.minPartConfidence);\n        break;\n    }\n\n    ctx.clearRect(0, 0, videoWidth, videoHeight);\n\n    if (guiState.output.showVideo) {\n      ctx.save();\n      ctx.scale(-1, 1);\n      ctx.translate(-videoWidth, 0);\n      ctx.drawImage(video, 0, 0, videoWidth, videoHeight);\n      ctx.restore();\n    }\n\n    \n    poses.forEach(({ score, keypoints }) => {\n      if (score >= minPoseConfidence) {\n        if (guiState.output.showPoints) {\n          drawKeypoints(keypoints, minPartConfidence, ctx);\n        }\n        if (guiState.output.showSkeleton) {\n          drawSkeleton(keypoints, minPartConfidence, ctx);\n        }\n      }\n    });\n\n    stats.end();\n\n    requestAnimationFrame(poseDetectionFrame);\n  }\n\n  poseDetectionFrame();\n}\n\n\nasync function bindPage() {\n  const net = await posenet.load(0.50);\n\n  document.getElementById('loading').style.display = 'none';\n  document.getElementById('main').style.display = 'block';\n\n  let video;\n\n  try {\n    video = await loadVideo();\n  } catch(e) {\n    let info = document.getElementById('info');\n    info.textContent = \"this browser does not support video capture, or this device does not have a camera\";\n    info.style.display = 'block';\n    throw e;\n  }\n\n  setupGui([], net);\n  setupFPS();\n  detectPoseInRealTime(video, net);\n}\n\nnavigator.getUserMedia = navigator.getUserMedia ||\n  navigator.webkitGetUserMedia ||\n  navigator.mozGetUserMedia;\nbindPage(); \n\n  <script/>",
      "status": "[86]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "\n<script>\n  function setupFPS() {\n  stats.showPanel(0);\n  document.body.appendChild(stats.dom);\n}\n\n\nfunction detectPoseInRealTime(video, net) {\n  const canvas = document.getElementById('output');\n  const ctx = canvas.getContext('2d');\n  const flipHorizontal = true; \n\n  canvas.width = videoWidth;\n  canvas.height = videoHeight;\n\n  async function poseDetectionFrame() {\n    if (guiState.changeToArchitecture) {\n      \n      guiState.net.dispose();\n\n      guiState.net = await posenet.load(Number(guiState.changeToArchitecture));\n\n      guiState.changeToArchitecture = null;\n    }\n\n    stats.begin();\n\n    \n    const imageScaleFactor = guiState.input.imageScaleFactor;\n    const outputStride = Number(guiState.input.outputStride);\n\n    let poses = [];\n    let minPoseConfidence;\n    let minPartConfidence;\n    switch (guiState.algorithm) {\n      case 'single-pose':\n        const pose = await guiState.net.estimateSinglePose(video, imageScaleFactor, flipHorizontal, outputStride);\n        poses.push(pose);\n\n        minPoseConfidence = Number(\n          guiState.singlePoseDetection.minPoseConfidence);\n        minPartConfidence = Number(\n          guiState.singlePoseDetection.minPartConfidence);\n        break;\n      case 'multi-pose':\n        poses = await guiState.net.estimateMultiplePoses(video, imageScaleFactor, flipHorizontal, outputStride,\n          guiState.multiPoseDetection.maxPoseDetections,\n          guiState.multiPoseDetection.minPartConfidence,\n          guiState.multiPoseDetection.nmsRadius);\n\n        minPoseConfidence = Number(guiState.multiPoseDetection.minPoseConfidence);\n        minPartConfidence = Number(guiState.multiPoseDetection.minPartConfidence);\n        break;\n    }\n\n    ctx.clearRect(0, 0, videoWidth, videoHeight);\n\n    if (guiState.output.showVideo) {\n      ctx.save();\n      ctx.scale(-1, 1);\n      ctx.translate(-videoWidth, 0);\n      ctx.drawImage(video, 0, 0, videoWidth, videoHeight);\n      ctx.restore();\n    }\n\n    \n    poses.forEach(({ score, keypoints }) => {\n      if (score >= minPoseConfidence) {\n        if (guiState.output.showPoints) {\n          drawKeypoints(keypoints, minPartConfidence, ctx);\n        }\n        if (guiState.output.showSkeleton) {\n          drawSkeleton(keypoints, minPartConfidence, ctx);\n        }\n      }\n    });\n\n    stats.end();\n\n    requestAnimationFrame(poseDetectionFrame);\n  }\n\n  poseDetectionFrame();\n}\n\n\nasync function bindPage() {\n  const net = await posenet.load(0.50);\n\n  document.getElementById('loading').style.display = 'none';\n  document.getElementById('main').style.display = 'block';\n\n  let video;\n\n  try {\n    video = await loadVideo();\n  } catch(e) {\n    let info = document.getElementById('info');\n    info.textContent = \"this browser does not support video capture, or this device does not have a camera\";\n    info.style.display = 'block';\n    throw e;\n  }\n\n  setupGui([], net);\n  setupFPS();\n  detectPoseInRealTime(video, net);\n}\n\nnavigator.getUserMedia = navigator.getUserMedia ||\n  navigator.webkitGetUserMedia ||\n  navigator.mozGetUserMedia;\nbindPage(); \n\n  <script/> </script><br>",
      "type": "code"
    },
    {
      "code": "//>html\n\n  \n</body>\n</html>",
      "status": "[87]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "\n\n  \n\n <br>",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}